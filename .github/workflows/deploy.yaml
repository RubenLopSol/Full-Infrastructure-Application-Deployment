on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  # Secrets (valores almacenados en Settings > Secrets > Actions)
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

  # Variables no sensibles
  CLUSTER_NAME: lahuella
  NAMESPACE: localstack
  DOMAIN: midominio.local
  TERRAFORM_DIR: infra/terraform
  K8S_DIR: infra/k8s
  INIT_SCRIPT: script/init.sh

jobs:
  full-deploy:
    runs-on: self-hosted
    name: Build Infra + Deploy App
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      # -------------------------------------------------------
      # üß± INFRASTRUCTURE PHASE
      # -------------------------------------------------------
      - name: ================= INFRASTRUCTURE PHASE =================
        run: echo "üèóÔ∏è  Starting Infrastructure setup..."

      - name: Ensure Minikube cluster exists
        run: |
          echo "Checking cluster $CLUSTER_NAME..."
          if ! minikube profile list | grep -q "$CLUSTER_NAME"; then
            echo "Creating cluster $CLUSTER_NAME..."
            minikube start -p $CLUSTER_NAME --cpus=4 --memory=6g
          else
            echo "‚úÖ Cluster $CLUSTER_NAME already exists"
          fi
          kubectl config use-context $CLUSTER_NAME
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

      - name: Install Localstack via Helm
        run: |
          echo "Installing Localstack..."
          helm repo add localstack https://helm.localstack.cloud
          helm repo update
          helm upgrade --install localstack localstack/localstack \
            --namespace $NAMESPACE \
            --create-namespace \
            -f $K8S_DIR/localstack-values.yaml
          echo "‚è≥ Waiting for Localstack pod to be ready..."
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=localstack -n $NAMESPACE --timeout=180s

      - name: Enable Ingress Controller and create Ingress
        run: |
          echo "Checking NGINX ingress addon for Minikube..."
          if ! minikube addons list -p $CLUSTER_NAME | grep -q "ingress.*enabled"; then
            echo "Enabling ingress addon..."
            minikube addons enable ingress -p $CLUSTER_NAME
          else
            echo "‚úÖ Ingress addon already enabled"
          fi

          echo "‚è≥ Waiting for ingress controller pods to be ready..."
          kubectl wait --namespace ingress-nginx \
            --for=condition=Ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=180s

          echo "‚è≥ Waiting for admission webhook to be ready..."
          kubectl rollout status deployment/ingress-nginx-controller -n ingress-nginx --timeout=180s

          echo "Creating Ingress for $DOMAIN..."
          kubectl apply -f $K8S_DIR/ingress.yaml

          IP=$(minikube ip -p $CLUSTER_NAME)
          echo "Ensuring /etc/hosts contains $DOMAIN -> $IP"
          if ! grep -q "$DOMAIN" /etc/hosts; then
            echo "$IP $DOMAIN" | sudo tee -a /etc/hosts
            echo "‚úÖ Added $DOMAIN to /etc/hosts"
          else
            echo "‚úÖ $DOMAIN already present in /etc/hosts"
          fi

      - name: Create S3 bucket for Terraform remote state (Job)
        run: |
          echo "Creating S3 remote state bucket via Kubernetes Job..."
          kubectl apply -f $K8S_DIR/configmap.yaml
          kubectl apply -f $K8S_DIR/job_exe_seed.yaml
          echo "‚è≥ Waiting for job to complete..."
          kubectl wait --for=condition=complete job/localstack-seed -n $NAMESPACE --timeout=120s
          echo "‚úÖ Terraform remote state bucket ready"

      - name: Apply Terraform Infrastructure
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          echo "Initializing Terraform..."
          tfenv use 1.5.5 || true
          terraform init -upgrade
          terraform apply -auto-approve
          echo "‚úÖ Terraform applied successfully"

      - name: Validate Localstack resources
        run: |
          echo "Validating Localstack resources..."
          awslocal --endpoint-url=http://$DOMAIN s3 ls
          awslocal --endpoint-url=http://$DOMAIN dynamodb list-tables
          awslocal --endpoint-url=http://$DOMAIN sqs list-queues
          awslocal --endpoint-url=http://$DOMAIN logs describe-log-groups
          echo "‚úÖ Validation completed successfully"

      - name: Seed DynamoDB tables if empty
        run: |
          if ! aws --endpoint-url=http://$DOMAIN dynamodb list-tables | grep -q la_huella_products; then
            echo "Populating initial data..."
            bash $INIT_SCRIPT
            echo "‚úÖ init.sh executed successfully"
          else
            echo "‚úÖ Tables already initialized"
          fi

      # -------------------------------------------------------
      # üöÄ APPLICATION PHASE
      # -------------------------------------------------------
      - name: ================= APPLICATION PHASE =================
        run: echo "üöÄ Starting Application Deployment..."

      - name: Build Docker image
        run: |
          echo "Building Docker image for the app..."
          docker build -t lahuella-app:latest .
          echo "Image built successfully"

      - name: Load image into Minikube
        run: |
          echo "Loading image into Minikube..."
          minikube -p $CLUSTER_NAME image load lahuella-app:latest

      - name: Apply Kubernetes manifests
        run: |
          echo "Applying Kubernetes manifests..."
          kubectl apply -f $K8S_DIR/deployment-app.yaml
          kubectl apply -f $K8S_DIR/service-app.yaml
          kubectl apply -f $K8S_DIR/ingress-app.yaml
          echo "‚úÖ Application deployed successfully!"

      - name: Verify running pods & ingress
        run: |
          echo "Checking deployment status..."
          kubectl get pods -A -o wide
          kubectl get ingress -A

      - name: ================= SUMMARY =================
        run: |
          echo "üéØ Application available at: http://$DOMAIN/app"
          echo "‚úÖ Infrastructure & application deployed successfully!"
